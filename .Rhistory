fishes <- tibble(#enhanced data frame
N = 40:200,
prob = choose(N - 25, 15) * choose(25, 5) / choose(N, 20))
library(tidyverse)# R package
fishes <- tibble(#enhanced data frame
N = 40:200,
prob = choose(N - 25, 15) * choose(25, 5) / choose(N, 20))
ggplot(data = fishes, mapping = aes(x = N, y = prob) ) +
geom_line() +
labs( title = "Number of possible subsets",
x = "N",
y = "prob")
fishes <- tibble(#enhanced data frame
N = 40:200,
prob = choose(N - 25, 15))
ggplot(data = fishes, mapping = aes(x = N, y = prob) ) +
geom_line() +
labs( title = "Number of possible subsets",
x = "N",
y = "prob")
fishes <- tibble(#enhanced data frame
N = 40:200,
prob = choose(N, 20))
ggplot(data = fishes, mapping = aes(x = N, y = prob) ) +
geom_line() +
labs( title = "Number of possible subsets",
x = "N",
y = "prob")
N = 40:200,
prob = )choose(N - 25, 15) * choose(25, 5)) / choose(N, 20))
fishes <- tibble(#enhanced data frame
N = 40:200,
prob = (choose(N - 25, 15) * choose(25, 5)) / choose(N, 20))
ggplot(data = fishes, mapping = aes(x = N, y = prob) ) +
geom_line() +
labs( title = "Number of possible subsets",
x = "N",
y = "prob")
$P(B \intersection A_3) = 0.01 * 0.1 = 0.001$
$P(B \intersection A_2) = 0.01 * 0.2 = 0.002$
$P(B \intersection A_1) = 0.9 * 0.7 = 0.63$
$P(B) = 0.633$
$P(B \intersection A_1) / P(B) =
0.63 / 0.633
tinytex::install_tinytex()
?binom
??binom
?rbinom
qbinom(4, 10, 1/3)
qbinom(4, 10, 1/3)
qbinom(p = 4, size = 10, prob = 1/3)
dbinom(4, size = 10, prob = 1/3)
qbinom(4, 10, 1/3)
pbinom(4, 10, 1/3)
dbinom(5, 20, 2/3)
rbinom(2, 10, 0.01)
pbinom(2, 10, 0.01, lower.tail = F)
pbinom(1, 10, 0.01)
1 -pbinom(1, 10, 0.01)
install.packages("slashbox")
library(tidyverse)
library(fastR2)
install.packages("fastR2")
install.packages("fastR2")
library(fastR2)
dr <- 206/506
dpois(44, dr)
dpois(44, 89 *dr)
?ppois
1 - ppois(44, 89 *dr)
pbinom(3, 12, 0.5)
pbinom(3, 12, 0.5) + pbinom(8, 12, 0.5, lower.tail = F)
pnbinom(8,3,0.5, lower.tail= F)
pexp(3.2, -1)
exp(3.2*3.2)
exp(1)
pexp(3.2, -1)
pexp(3.2, 1)
1 - pexp(3.2, 1)
?seq
theta <- seq(0,2,0.01)
plot(theta, 1/theta * (pexp(3.2, 1/theta)))
install.packages("Hmisc")
library(Hmisc)
alc <- sasxport.get("ALQ_I.XPT")
setwd("~/Courses/Info 478/workbook-5-ksorstokke2")
alc <- sasxport.get("ALQ_I.XPT")
demo <- sasxport.get("DEMO_I.XPT")
View(alc)
View(demo)
library(tidyverse)
dat <- left_join(alc, demo, by = "seqn")
View(dat)
knitr::opts_chunk$set(echo = TRUE)
z.test <- function( x, alternative = c("greater", "less", "two.sided"), mu0 = 0, sigma = 1){
alternative = match.arg(alternative) #fancy matching
n <- length(x)    # number of observations
xbar <- mean(x)   #mean of x
z <- (xbar - mu0) / (sigma / sqrt(n))      # z statistic for testing H0: mu = mu0
#calculate p-value
pvalue = ifelse( alternative == "two.sided", 2*pnorm(q= abs(z), lower.tail = F),
ifelse(alternative == "greater", pnorm(q = z, lower.tail = F), pnorm(q = z)))
return(pvalue)
}
temp = rnorm(n = 25, mean = 0, sd = 1)
z.test(x = temp,
alternative = "two.sided",
mu0 = 0,
sigma = 1)
temp = rnorm(n = 25, mean = 0, sd = 1)
z.test(x = temp,
alternative = "two.sided",
mu0 = 0,
sigma = 1)
mean(temp)
temp = rnorm(n = 25, mean = 0, sd = 1)
mean(temp)
z.test(x = temp,
alternative = "two.sided",
mu0 = 0,
sigma = 1)
temp = rnorm(n = 25, mean = 0, sd = 1)
mean(temp)
z.test(x = temp,
alternative = "two.sided",
mu0 = 0,
sigma = 1)
#calculate p-value
pvalue = ifelse( alternative == "two.sided", 2*pnorm(q= z, lower.tail = F),
ifelse(alternative == "greater", pnorm(q = z, lower.tail = F), pnorm(q = z)))
z.test <- function( x, alternative = c("greater", "less", "two.sided"), mu0 = 0, sigma = 1){
alternative = match.arg(alternative) #fancy matching
n <- length(x)    # number of observations
xbar <- mean(x)   #mean of x
z <- (xbar - mu0) / (sigma / sqrt(n))      # z statistic for testing H0: mu = mu0
#calculate p-value
pvalue = ifelse( alternative == "two.sided", 2*pnorm(q= z, lower.tail = F),
ifelse(alternative == "greater", pnorm(q = z, lower.tail = F), pnorm(q = z)))
return(pvalue)
}
temp = rnorm(n = 25, mean = 0, sd = 1)
mean(temp)
z.test(x = temp,
alternative = "two.sided",
mu0 = 0,
sigma = 1)
temp = rnorm(n = 25, mean = 0, sd = 1)
mean(temp)
z.test(x = temp,
alternative = "two.sided",
mu0 = 0,
sigma = 1)
temp = rnorm(n = 25, mean = 0, sd = 1)
mean(temp)
z.test(x = temp,
alternative = "two.sided",
mu0 = 0,
sigma = 1)
z.test <- function( x, alternative = c("greater", "less", "two.sided"), mu0 = 0, sigma = 1){
alternative = match.arg(alternative) #fancy matching
n <- length(x)    # number of observations
xbar <- mean(x)   #mean of x
z <- (xbar - mu0) / (sigma / sqrt(n))      # z statistic for testing H0: mu = mu0
#calculate p-value
pvalue = ifelse( alternative == "two.sided", 2*pnorm(q= abs(z), lower.tail = F),
ifelse(alternative == "greater", pnorm(q = z, lower.tail = F), pnorm(q = z)))
return(pvalue)
}
temp = rnorm(n = 25, mean = 0, sd = 1)
mean(temp)
z.test(x = temp,
alternative = "two.sided",
mu0 = 0,
sigma = 1)
z.test <- function( x, alternative = c("greater", "less", "two.sided"), mu0 = 0, sigma = 1){
alternative = match.arg(alternative) #fancy matching
n <- length(x)    # number of observations
xbar <- mean(x)   #mean of x
z <- (xbar - mu0) / (sigma)      # z statistic for testing H0: mu = mu0
#calculate p-value
pvalue = ifelse( alternative == "two.sided", 2*pnorm(q= abs(z), lower.tail = F),
ifelse(alternative == "greater", pnorm(q = z, lower.tail = F), pnorm(q = z)))
return(pvalue)
}
temp = rnorm(n = 25, mean = 0, sd = 1)
mean(temp)
z.test(x = temp,
alternative = "two.sided",
mu0 = 0,
sigma = 1)
temp = rnorm(n = 25, mean = 0, sd = 1)
mean(temp)
z.test(x = temp,
alternative = "two.sided",
mu0 = 0,
sigma = 1)
temp = rnorm(n = 25, mean = 0, sd = 1)
mean(temp)
z.test(x = temp,
alternative = "two.sided",
mu0 = 0,
sigma = 1)
z.test <- function( x, alternative = c("greater", "less", "two.sided"), mu0 = 0, sigma = 1){
alternative = match.arg(alternative) #fancy matching
n <- length(x)    # number of observations
xbar <- mean(x)   #mean of x
z <- (xbar - mu0) / (sigma/sqrt(n))      # z statistic for testing H0: mu = mu0
#calculate p-value
pvalue = ifelse( alternative == "two.sided", 2*pnorm(q= abs(z), lower.tail = F),
ifelse(alternative == "greater", pnorm(q = z, lower.tail = F), pnorm(q = z)))
return(pvalue)
}
temp = rnorm(n = 25, mean = 0, sd = 1)
temp = rnorm(n = 25, mean = 0, sd = 1)
abs(mean(temp) *5)
z.test <- function( x, alternative = c("greater", "less", "two.sided"), mu0 = 0, sigma = 1){
alternative = match.arg(alternative) #fancy matching
n <- length(x)    # number of observations
xbar <- mean(x)   #mean of x
z <- (xbar - mu0) / (sigma/sqrt(n))      # z statistic for testing H0: mu = mu0
#calculate p-value
pvalue = ifelse( alternative == "two.sided", 2*pnorm(q= abs(z), lower.tail = F),
ifelse(alternative == "greater", pnorm(q = z, lower.tail = F), pnorm(q = z)))
return(pvalue)
}
abs(mean(temp) *5)
mean(temp)
abs(mean(temp) *5)
z.test(x = temp,
alternative = "two.sided",
mu0 = 0,
sigma = 1)
temp = rnorm(n = 25, mean = 0, sd = 1)
mean(temp)
abs(mean(temp) *5)
z.test(x = temp,
alternative = "two.sided",
mu0 = 0,
sigma = 1)
temp = rnorm(n = 25, mean = 0, sd = 1)
mean(temp)
abs(mean(temp) *5)
z.test(x = temp,
alternative = "two.sided",
mu0 = 0,
sigma = 1)
temp = rnorm(n = 25, mean = 0, sd = 1)
mean(temp)
abs(mean(temp) *5)
z.test(x = temp,
alternative = "two.sided",
mu0 = 0,
sigma = 1)
temp = rnorm(n = 25, mean = 0, sd = 1)
mean(temp)
abs(mean(temp) *5)
z.test(x = temp,
alternative = "two.sided",
mu0 = 0,
sigma = 1)
?replicate
samps <- rep(mean(rnorm(25,5,1)), 10)
samps
samps <- rep(0, 1000)
for(i in 1:1000) {
samps[i] <- mean(rnorm(25,5,1))
}
p-vals <- rep(0,1000)
p_vals <- rep(0,1000)
null_sim <- data.frame(samps, p_vals)
p_vals <- replicate(samps, z.test(alternative="two.sided", mu0 = 5, sigma = 1))
samps <- rep(0, 1000)
for(i in 1:1000) {
samps[i] <- rnorm(25,5,1)
}
null_sim <- data.frame(matrix(0,nrow=1000, ncol = 26))
for(i in 1:1000) {
samps[i, 1:25] <- rnorm(25,5,1)
}
for(i in 1:1000) {
samps[i, ] <- rnorm(25,5,1)
}
?data.frame
library(miscTools)
null_sim <- data.frame(matrix(0,nrow=1000, ncol = 26))
for(i in 1:1000) {
null_sim[i, ] <- rnorm(25,5,1)
}
for(i in 1:1000) {
null_sim[i, 1:25] <- rnorm(25,5,1)
}
View(null_sim)
colnames(null_sim)[26] <- "p_val"
null_sim[,26] <- replicate(null_sim[,1:25],
z.test(alternative="two.sided",mu0=5, sigma=1))
as.vector(null_sim[1,1:25])
null_sim[,26] <- replicate(as.vector(null_sim[,1:25]),
z.test(alternative="two.sided",mu0=5, sigma=1))
null_sim <- data.frame(matrix(0,nrow=1000, ncol = 26))
colnames(null_sim)[26] <- "p_val"
for(i in 1:1000) {
x <- rnorm(25,5,1)
null_sim[i, 1:25] <- x
null_sim[i, 26] <- z.test(x, "two.sided", 5, 1)
}
qqplot(null_sim[,26], runif(1000))
?qqplot
qqplot(null_sim[,26], runif(1000), xlab = "P-values", ylab = "Unif(0,1)")
null_sim <- data.frame(matrix(0,nrow=1000, ncol = 11))
colnames(null_sim)[26] <- "p_val"
colnames(null_sim)[11] <- "p_val"
for(i in 1:1000) {
x <- rnorm(10,6,1)
null_sim[i, 1:10] <- x
null_sim[i, 11] <- z.test(x, "two.sided", 5, 1)
}
qqplot(null_sim[,11], runif(1000), xlab = "P-Values", ylab = "Unif(0,1)")
nrep <- 1000
null_sim <- tibble(
pval <- replicate(n = nrep,
z.test(x=rnorm(25,5,1),"two.sided", 5, 1))
)
qqplot(null_sim, runif(1000), xlab = "P-Values", ylab = "Unif(0,1)")
View(null_sim)
null_sim <- tibble(
pvalue.null <- replicate(n = nrep,
z.test(x=rnorm(25,5,1),"two.sided", 5, 1))
)
qqplot(null_sim, runif(1000), xlab = "P-Values", ylab = "Unif(0,1)")
qqplot(null_sim[1,], runif(1000), xlab = "P-Values", ylab = "Unif(0,1)")
qqplot(null_sim[,1], runif(1000), xlab = "P-Values", ylab = "Unif(0,1)")
qqplot(null_sim$`... <- NULL`, runif(1000), xlab = "P-Values", ylab = "Unif(0,1)")
names(null_sim)[1] <- 'PVal'
qqplot(null_sim$PVal, runif(1000), xlab = "P-Values", ylab = "Unif(0,1)")
nrep <- 1000
null_sim <- tibble(
pvalue.null <- replicate(n = nrep,
z.test(x=rnorm(10,6,1),"two.sided", 5, 1))
)
names(null_sim)[1] <- 'PVal'
qqplot(null_sim$PVal, runif(1000), xlab = "P-Values", ylab = "Unif(0,1)")
qnorm(0.99,0,1)
qnorm(0.0179,0,1)
1.326*5000
^2
6630^2
knitr::opts_chunk$set(echo = TRUE)
library(miscTools)
library(tidyverse)
30000 + 2.326 * (5000 / sqrt(20))
(qnorm(0.99)-qnorm(0.0179))^2
n <- (qnorm(0.99) - qnorm(0.0179))^2
30000 + 2.326 * (5000 / sqrt(n))
k <- 30000 + 2.326 * (5000 / sqrt(n))
z <- qnorm(0.99,0,1)
n <- (qnorm(0.99) - qnorm(0.0179))^2
k <- 30000 + z * (5000 / sqrt(n))
?ceil
